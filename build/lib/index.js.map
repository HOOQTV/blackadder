{"version":3,"sources":["index.js"],"names":["pkg","require","HttpClient","options","name","timeout","process","env","BLACKADDER_TIMEOUT","userAgent","version","defaults","json","Object","assign","client","createClient","method","url","body","toLowerCase","Promise","resolve","reject","args","indexOf","splice","push","error","response","apply","headers","test","form","formData","common","query","qs","withBody"],"mappings":"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","file":"index.js","sourcesContent":["/* @module HttpClient */\nimport heart from 'flashheart';\nconst pkg = require('../../package.json');\n\n/**\n * Class representing HttpClient\n */\nexport default class HttpClient {\n    constructor(options) {\n        this.options = {\n            name: `${pkg.name}`,\n            timeout: process.env.BLACKADDER_TIMEOUT || 60000,  // default to 1m\n            userAgent: `${pkg.name}/${pkg.version}`,\n            defaults: {\n                json: true\n            }\n        };\n        this.options = Object.assign(this.options, options);\n        this.client = heart.createClient(this.options);\n    }\n\n    /**\n     * Common method call to flashheart\n     * @param {String} method\n     * @param {String} url\n     * @param [Object] body\n     * @param [Object] options\n     */\n    async common(method, url, body, options) {\n        method = method.toLowerCase();\n        return new Promise((resolve, reject) => {\n            const args = [\n                url,\n                body,\n                options\n            ];\n\n            if ([ 'get', 'delete' ].indexOf(method) >= 0) {\n                args.splice(1, 1);\n            }\n\n            args.push((error, body, response) => {\n                if (error) {\n                    return reject(error);\n                }\n                resolve({\n                    response,\n                    body\n                });\n            });\n\n            this.client[method].apply(this.client, args);\n        });\n    }\n\n    /**\n     * Request with payload\n     */\n    async withBody(method, url, body = {}, options = { headers: {}, json: true }) {\n        if (/x-www-form-urlencoded/.test(options.headers['Content-Type'])) {\n            options.form = body;\n            body = null;\n        } else if (/form-data/.test(options.headers['Content-Type'])) {\n            options.formData = body;\n            body = null;\n        }\n        // this is the application/json\n        return await this.common(method, url, body, options);\n    }\n\n    /**\n     * Executes request\n     */\n    async exec(url, body = {}, query = {}, options = { headers: {}, json: true }, method = 'get') {\n        method = method.toLowerCase();\n        options.qs = query;\n        if ([ 'post', 'put' ].indexOf(method) >= 0) {\n            return await this.withBody(method, url, body, options);\n        }\n        return await this.common(method, url, query, options);\n    }\n\n    /**\n     * GET\n     * @param {String} url\n     * @param {Object} query\n     * @param {Object} options\n     */\n    async get(url, query = {}, options = {}) {\n        options.qs = query;\n        return await this.common('get', url, null, options);\n    }\n\n    /**\n     * POST\n     * @param {String} url\n     * @param {Object} body\n     * @param {Object} options\n     */\n    async post(url, body, options) {\n        return await this.withBody('post', url, body, options);\n    }\n\n    /**\n     * PUT\n     * @param {String} url\n     * @param {Object} body\n     * @param {Object} options\n     */\n    async put(url, body, options) {\n        return await this.withBody('put', url, body, options);\n    }\n\n    /**\n     * PATCH\n     * @param {String} url\n     * @param {Object} body\n     * @param {Object} options\n     */\n    async patch(url, body, options) {\n        return await this.withBody('patch', url, body, options);\n    }\n\n    /**\n     * DELETE\n     * @param {String} url\n     * @param {Object} query\n     * @param {Object} options\n     */\n    async delete(url, query = {}, options = {}) {\n        options.qs = query;\n        return await this.common('delete', url, null, options);\n    }\n}\n"],"sourceRoot":"/Users/adikurniawan/Developer/hooq/blackadder/lib"}